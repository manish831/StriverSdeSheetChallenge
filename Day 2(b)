//Next Permutations

#include <bits/stdc++.h> 
vector<int> nextPermutation(vector<int> &nums, int n)
{
    //  Write your code here.
    //method 1
    // next_permutation(nums.begin(), nums.end());


    //method 2  Brute Force way..
    /*
        -Generate all combinations and store it in sorted order.
        -Iterate all the stored combinations and chek with the given permutations
        -If any ith permutation matched then return (i+1)th permutation.
        - TC : O(N!)+O(N)
        - SC : O(N*N!)    
    */
    /*
    Method 3 : Linear complexity Solution -> Optimized Solution.
        Algorithm:
        - Traverse from Right and find following:
            -Find i such that arr[i] < arr[i+1]
                => idx1 = i.
            -Find j such that arr[j] > arr[idx1]
                 => idx2 = j;
        - Swap(arr[idx1], arr[idx2]);
        -reverse(idx+1, n);
    */
    
        int index1=-1;
        int index2=-1;
        //we will store the two index as the value with -1;
        // int n=nums.size();
        for(int i=n-1;i>0;i--)
        {
            if(nums[i-1]<nums[i])
            {
                index1=i-1;
                //we will store the index 1 in this way that if the value of nums[i]is greater than the value of the nums[i-1]
                //then we will store i-1 as the index1
                break;
            }
        }
        if(index1!=-1)
            //if the index 1 is not equal to the -1 then we are going to update the index2
        {
            for(int j=n-1;j>0;j--)
            {
                if(nums[j]>nums[index1])
                {
                    index2=j;
                    // this is the condition that you will see that how it will inter the value of the index2 as j
                    break;
                }
            }
            swap(nums[index1],nums[index2]);
            // in this step we will swap the value of the index1 with index2 to get the next permutation 
        }
        //at last reverse the value 
        reverse(nums.begin()+index1+1,nums.end());

        return nums;
    
}
